/* 
 * Accounts Api
 *
 * API for accessing the Accounts subsystem. Currently, only invitation procedures are implemented.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Iatec.Apis.Accounts.v1.Client.Client;
using Iatec.Apis.Accounts.v1.Client.Api;
using Iatec.Apis.Accounts.v1.Client.Model;

namespace Iatec.Apis.Accounts.v1.Client.Test
{
    /// <summary>
    ///  Class for testing InvitationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InvitationApiTests
    {
        private InvitationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InvitationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InvitationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InvitationApi
            //Assert.IsInstanceOfType(typeof(InvitationApi), instance, "instance is a InvitationApi");
        }

        
        /// <summary>
        /// Test GetLinkedUsers
        /// </summary>
        [Test]
        public void GetLinkedUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? appKey = null;
            //string filter = null;
            //int? count = null;
            //int? start = null;
            //var response = instance.GetLinkedUsers(appKey, filter, count, start);
            //Assert.IsInstanceOf<PagedLinkedUserModel> (response, "response is PagedLinkedUserModel");
        }
        
        /// <summary>
        /// Test GetUserById
        /// </summary>
        [Test]
        public void GetUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? userId = null;
            //var response = instance.GetUserById(userId);
            //Assert.IsInstanceOf<UserModel> (response, "response is UserModel");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? count = null;
            //int? start = null;
            //var response = instance.GetUsers(filter, count, start);
            //Assert.IsInstanceOf<PagedUserModel> (response, "response is PagedUserModel");
        }
        
        /// <summary>
        /// Test LinkUser
        /// </summary>
        [Test]
        public void LinkUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? appKey = null;
            //LinkedUserModel body = null;
            //var response = instance.LinkUser(appKey, body);
            //Assert.IsInstanceOf<UserModel> (response, "response is UserModel");
        }
        
        /// <summary>
        /// Test UnlinkUser
        /// </summary>
        [Test]
        public void UnlinkUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? appKey = null;
            //string userId = null;
            //instance.UnlinkUser(appKey, userId);
            
        }
        
    }

}
