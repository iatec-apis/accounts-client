/* 
 * Accounts Api
 *
 * API for accessing the Accounts subsystem. Currently, only invitation procedures are implemented.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Iatec.Apis.Accounts.v1.Client.Client;
using Iatec.Apis.Accounts.v1.Client.Model;

namespace Iatec.Apis.Accounts.v1.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get many linked users
        /// </summary>
        /// <remarks>
        /// Get many linke users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>PagedLinkedUserModel</returns>
        PagedLinkedUserModel GetLinkedUsers (Guid? appKey, string filter = null, int? count = null, int? start = null);

        /// <summary>
        /// Get many linked users
        /// </summary>
        /// <remarks>
        /// Get many linke users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>ApiResponse of PagedLinkedUserModel</returns>
        ApiResponse<PagedLinkedUserModel> GetLinkedUsersWithHttpInfo (Guid? appKey, string filter = null, int? count = null, int? start = null);
        /// <summary>
        /// Get an user
        /// </summary>
        /// <remarks>
        /// Get an user by Id
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>UserModel</returns>
        UserModel GetUserById (Guid? userId);

        /// <summary>
        /// Get an user
        /// </summary>
        /// <remarks>
        /// Get an user by Id
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> GetUserByIdWithHttpInfo (Guid? userId);
        /// <summary>
        /// Get many users
        /// </summary>
        /// <remarks>
        /// Get many users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>PagedUserModel</returns>
        PagedUserModel GetUsers (string filter = null, int? count = null, int? start = null);

        /// <summary>
        /// Get many users
        /// </summary>
        /// <remarks>
        /// Get many users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>ApiResponse of PagedUserModel</returns>
        ApiResponse<PagedUserModel> GetUsersWithHttpInfo (string filter = null, int? count = null, int? start = null);
        /// <summary>
        /// Link user
        /// </summary>
        /// <remarks>
        /// Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>UserModel</returns>
        UserModel LinkUser (Guid? appKey, LinkedUserModel body = null);

        /// <summary>
        /// Link user
        /// </summary>
        /// <remarks>
        /// Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> LinkUserWithHttpInfo (Guid? appKey, LinkedUserModel body = null);
        /// <summary>
        /// Unlink user
        /// </summary>
        /// <remarks>
        /// Unlink an user from an application.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns></returns>
        void UnlinkUser (Guid? appKey, string userId);

        /// <summary>
        /// Unlink user
        /// </summary>
        /// <remarks>
        /// Unlink an user from an application.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlinkUserWithHttpInfo (Guid? appKey, string userId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get many linked users
        /// </summary>
        /// <remarks>
        /// Get many linke users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of PagedLinkedUserModel</returns>
        System.Threading.Tasks.Task<PagedLinkedUserModel> GetLinkedUsersAsync (Guid? appKey, string filter = null, int? count = null, int? start = null);

        /// <summary>
        /// Get many linked users
        /// </summary>
        /// <remarks>
        /// Get many linke users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (PagedLinkedUserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedLinkedUserModel>> GetLinkedUsersAsyncWithHttpInfo (Guid? appKey, string filter = null, int? count = null, int? start = null);
        /// <summary>
        /// Get an user
        /// </summary>
        /// <remarks>
        /// Get an user by Id
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> GetUserByIdAsync (Guid? userId);

        /// <summary>
        /// Get an user
        /// </summary>
        /// <remarks>
        /// Get an user by Id
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByIdAsyncWithHttpInfo (Guid? userId);
        /// <summary>
        /// Get many users
        /// </summary>
        /// <remarks>
        /// Get many users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of PagedUserModel</returns>
        System.Threading.Tasks.Task<PagedUserModel> GetUsersAsync (string filter = null, int? count = null, int? start = null);

        /// <summary>
        /// Get many users
        /// </summary>
        /// <remarks>
        /// Get many users by an optional filter
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (PagedUserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedUserModel>> GetUsersAsyncWithHttpInfo (string filter = null, int? count = null, int? start = null);
        /// <summary>
        /// Link user
        /// </summary>
        /// <remarks>
        /// Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> LinkUserAsync (Guid? appKey, LinkedUserModel body = null);

        /// <summary>
        /// Link user
        /// </summary>
        /// <remarks>
        /// Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> LinkUserAsyncWithHttpInfo (Guid? appKey, LinkedUserModel body = null);
        /// <summary>
        /// Unlink user
        /// </summary>
        /// <remarks>
        /// Unlink an user from an application.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlinkUserAsync (Guid? appKey, string userId);

        /// <summary>
        /// Unlink user
        /// </summary>
        /// <remarks>
        /// Unlink an user from an application.
        /// </remarks>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlinkUserAsyncWithHttpInfo (Guid? appKey, string userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvitationApi : IInvitationApi
    {
        private Iatec.Apis.Accounts.v1.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Iatec.Apis.Accounts.v1.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvitationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Apis.Accounts.v1.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Apis.Accounts.v1.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get many linked users Get many linke users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>PagedLinkedUserModel</returns>
        public PagedLinkedUserModel GetLinkedUsers (Guid? appKey, string filter = null, int? count = null, int? start = null)
        {
             ApiResponse<PagedLinkedUserModel> localVarResponse = GetLinkedUsersWithHttpInfo(appKey, filter, count, start);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get many linked users Get many linke users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>ApiResponse of PagedLinkedUserModel</returns>
        public ApiResponse< PagedLinkedUserModel > GetLinkedUsersWithHttpInfo (Guid? appKey, string filter = null, int? count = null, int? start = null)
        {
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling InvitationApi->GetLinkedUsers");

            var localVarPath = "/applications/{appKey}/linked-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appKey != null) localVarPathParams.Add("appKey", Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinkedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLinkedUserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLinkedUserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLinkedUserModel)));
            
        }

        /// <summary>
        /// Get many linked users Get many linke users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of PagedLinkedUserModel</returns>
        public async System.Threading.Tasks.Task<PagedLinkedUserModel> GetLinkedUsersAsync (Guid? appKey, string filter = null, int? count = null, int? start = null)
        {
             ApiResponse<PagedLinkedUserModel> localVarResponse = await GetLinkedUsersAsyncWithHttpInfo(appKey, filter, count, start);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get many linked users Get many linke users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (PagedLinkedUserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedLinkedUserModel>> GetLinkedUsersAsyncWithHttpInfo (Guid? appKey, string filter = null, int? count = null, int? start = null)
        {
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling InvitationApi->GetLinkedUsers");

            var localVarPath = "/applications/{appKey}/linked-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appKey != null) localVarPathParams.Add("appKey", Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLinkedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLinkedUserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLinkedUserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLinkedUserModel)));
            
        }

        /// <summary>
        /// Get an user Get an user by Id
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>UserModel</returns>
        public UserModel GetUserById (Guid? userId)
        {
             ApiResponse<UserModel> localVarResponse = GetUserByIdWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an user Get an user by Id
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>ApiResponse of UserModel</returns>
        public ApiResponse< UserModel > GetUserByIdWithHttpInfo (Guid? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InvitationApi->GetUserById");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
            
        }

        /// <summary>
        /// Get an user Get an user by Id
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> GetUserByIdAsync (Guid? userId)
        {
             ApiResponse<UserModel> localVarResponse = await GetUserByIdAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an user Get an user by Id
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByIdAsyncWithHttpInfo (Guid? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InvitationApi->GetUserById");

            var localVarPath = "/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
            
        }

        /// <summary>
        /// Get many users Get many users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>PagedUserModel</returns>
        public PagedUserModel GetUsers (string filter = null, int? count = null, int? start = null)
        {
             ApiResponse<PagedUserModel> localVarResponse = GetUsersWithHttpInfo(filter, count, start);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get many users Get many users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>ApiResponse of PagedUserModel</returns>
        public ApiResponse< PagedUserModel > GetUsersWithHttpInfo (string filter = null, int? count = null, int? start = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedUserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedUserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedUserModel)));
            
        }

        /// <summary>
        /// Get many users Get many users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of PagedUserModel</returns>
        public async System.Threading.Tasks.Task<PagedUserModel> GetUsersAsync (string filter = null, int? count = null, int? start = null)
        {
             ApiResponse<PagedUserModel> localVarResponse = await GetUsersAsyncWithHttpInfo(filter, count, start);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get many users Get many users by an optional filter
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A filter for matching the users (optional)</param>
        /// <param name="count">The maximum number of records to bring. (optional)</param>
        /// <param name="start">The number of records to skip. Used for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (PagedUserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedUserModel>> GetUsersAsyncWithHttpInfo (string filter = null, int? count = null, int? start = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedUserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedUserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedUserModel)));
            
        }

        /// <summary>
        /// Link user Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>UserModel</returns>
        public UserModel LinkUser (Guid? appKey, LinkedUserModel body = null)
        {
             ApiResponse<UserModel> localVarResponse = LinkUserWithHttpInfo(appKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Link user Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>ApiResponse of UserModel</returns>
        public ApiResponse< UserModel > LinkUserWithHttpInfo (Guid? appKey, LinkedUserModel body = null)
        {
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling InvitationApi->LinkUser");

            var localVarPath = "/applications/{appKey}/linked-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appKey != null) localVarPathParams.Add("appKey", Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
            
        }

        /// <summary>
        /// Link user Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> LinkUserAsync (Guid? appKey, LinkedUserModel body = null)
        {
             ApiResponse<UserModel> localVarResponse = await LinkUserAsyncWithHttpInfo(appKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Link user Link an user to an application. If the user does not exist, an invitation is sent to the user to fill in their remaining info.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="body">Data of the user to link to the application (optional)</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> LinkUserAsyncWithHttpInfo (Guid? appKey, LinkedUserModel body = null)
        {
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling InvitationApi->LinkUser");

            var localVarPath = "/applications/{appKey}/linked-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appKey != null) localVarPathParams.Add("appKey", Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
            
        }

        /// <summary>
        /// Unlink user Unlink an user from an application.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns></returns>
        public void UnlinkUser (Guid? appKey, string userId)
        {
             UnlinkUserWithHttpInfo(appKey, userId);
        }

        /// <summary>
        /// Unlink user Unlink an user from an application.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnlinkUserWithHttpInfo (Guid? appKey, string userId)
        {
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling InvitationApi->UnlinkUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InvitationApi->UnlinkUser");

            var localVarPath = "/applications/{appKey}/linked-users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appKey != null) localVarPathParams.Add("appKey", Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlinkUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unlink user Unlink an user from an application.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlinkUserAsync (Guid? appKey, string userId)
        {
             await UnlinkUserAsyncWithHttpInfo(appKey, userId);

        }

        /// <summary>
        /// Unlink user Unlink an user from an application.
        /// </summary>
        /// <exception cref="Iatec.Apis.Accounts.v1.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey">The AppKey of the application</param>
        /// <param name="userId">The Id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnlinkUserAsyncWithHttpInfo (Guid? appKey, string userId)
        {
            // verify the required parameter 'appKey' is set
            if (appKey == null)
                throw new ApiException(400, "Missing required parameter 'appKey' when calling InvitationApi->UnlinkUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling InvitationApi->UnlinkUser");

            var localVarPath = "/applications/{appKey}/linked-users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appKey != null) localVarPathParams.Add("appKey", Configuration.ApiClient.ParameterToString(appKey)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlinkUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
